// Generated by CoffeeScript 1.6.1
(function() {
  var arrow_head_left, arrow_head_right, arrow_to_self, draw, drawArrow, drawCalls, drawEvents, drawText, midpt, paperSetup, setupArrowHeads, setupArrowToSelf, setupBackground;

  paper.install(window);

  arrow_head_left = null;

  arrow_head_right = null;

  arrow_to_self = null;

  paperSetup = function(num_calls, num_events) {
    $("canvas").attr('width', num_calls * 200);
    $("canvas").attr('height', num_events * 100);
    paper.setup('drawing_canvas');
    return setupBackground(num_calls, $("canvas").attr('height'));
  };

  setupBackground = function(num_calls, height) {
    var colors, path, rect, _i, _ref, _results;
    colors = ["#AAFFFF", "#AAFFAA"];
    _results = [];
    for (_i = 0, _ref = num_calls - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--) {
      rect = new Rectangle(new Point(_i * 200, 0), new Point(_i * 200 + 200, height));
      path = new Path.Rectangle(rect);
      _results.push(path.fillColor = colors[_i % 2]);
    }
    return _results;
  };

  setupArrowHeads = function() {
    var path;
    path = new Path;
    path.add(new Point(5, 0));
    path.add(new Point(0, 3));
    path.add(new Point(5, 6));
    path.strokeColor = 'black';
    arrow_head_left = new Symbol(path);
    path = new Path;
    path.add(new Point(0, 0));
    path.add(new Point(5, 3));
    path.add(new Point(0, 6));
    path.strokeColor = 'black';
    return arrow_head_right = new Symbol(path);
  };

  setupArrowToSelf = function() {
    var path;
    path = new Path;
    path.add(new Point(0, 0));
    path.add(new Point(40, 0));
    path.add(new Point(40, 20));
    path.add(new Point(0, 20));
    path.strokeColor = 'black';
    return arrow_to_self = new Symbol(path);
  };

  drawArrow = function(x1, x2, y) {
    var head, line;
    if (x1 < x2) {
      line = new Path.Line(new Point(x1, y), new Point(x2, y));
      head = arrow_head_right.place([x2 - 3, y]);
    } else {
      line = new Path.Line(new Point(x1, y), new Point(x2, y));
      head = arrow_head_left.place([x2 + 3, y]);
    }
    return line.strokeColor = 'black';
  };

  drawCalls = function(calls, height) {
    var call, line, path, rect, roundingSize, text, _i, _len, _results;
    roundingSize = new Size(10, 10);
    _results = [];
    for (_i = 0, _len = calls.length; _i < _len; _i++) {
      call = calls[_i];
      rect = new Rectangle(new Point(_i * 200 + 25, call[1] - 40), new Point(_i * 200 + 175, call[1]));
      path = new Path.RoundRectangle(rect, roundingSize);
      path.fillColor = "#DDD";
      line = new Path.Line(new Point(_i * 200 + 100, call[1]), new Point(_i * 200 + 100, call[2]));
      line.strokeColor = '#000';
      text = new PointText(new Point(_i * 200 + 30, call[1] - 15));
      text.content = call[0];
      _results.push(text.characterStyle = {
        size: 20,
        fillColor: 'black'
      });
    }
    return _results;
  };

  drawText = function(x, y, string) {
    var text;
    text = new PointText(new Point(x, y));
    text.content = string;
    return text.characterStyle = {
      size: 10,
      fillColor: 'black'
    };
  };

  midpt = function(x1, x2) {
    var x;
    if (x1 > x2) {
      x = (x2 - x1) / 2 + x1;
    } else {
      x = (x1 - x2) / 2 + x2;
    }
    return x;
  };

  drawEvents = function(events) {
    var arrow, e, _i, _len, _results;
    setupArrowHeads();
    arrow_to_self = setupArrowToSelf();
    _results = [];
    for (_i = 0, _len = events.length; _i < _len; _i++) {
      e = events[_i];
      if (e[2] === 'to_self') {
        arrow_head_left.place([e[0] + 3, e[1] + 20]);
        arrow = arrow_to_self.place([e[0] + 20, e[1] + 10]);
        _results.push(drawText(e[0] + 50, e[1] + 15, e[3]));
      } else {
        drawArrow(e[0], e[4], e[1]);
        _results.push(drawText(midpt(e[0], e[4]), e[1] - 10, e[3]));
      }
    }
    return _results;
  };

  draw = function(num_calls, num_events, calls, events) {
    paperSetup(num_calls, num_events);
    drawCalls(calls, $("canvas").attr('height'));
    return drawEvents(events);
  };

  window.draw = draw;

}).call(this);
